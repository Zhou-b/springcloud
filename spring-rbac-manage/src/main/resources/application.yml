server:
  port: 8003
  tomcat:
    uri-encoding: UTF-8
eureka:
  client:
    service-url:
      defaultZone: http://${customConfig.eureka.server.username}:${customConfig.eureka.server.password}@${customConfig.eureka.server.hostname}:${customConfig.eureka.server.port}/eureka/
    register-with-eureka: true
    fetch-registry: true
spring:
  application:
    name: spring-rbac-manage
  cloud:
    loadbalancer:
      retry:
        enabled: true #该参数用来开启重试机制
    config:
#      uri: http://localhost:8888
      enabled: true #开启配置
      username: ${customConfig.config.server.username}
      password: ${customConfig.config.server.password}
      name: ${customConfig.config.server.appname} #配置名称
      profile: dev
      fail-fast: true
      discovery:
        enabled: true
        serviceId: spring-config
  boot: #admin的配置
    admin:
#      client:
        url: http://${customConfig.admin.server.hostname}:${customConfig.admin.server.port}
        username: ${customConfig.admin.server.username}
        password: ${customConfig.admin.server.password}
  redis:
    host: ${customConfig.redis.server.host}
    password: ${customConfig.redis.server.password}
    port: ${customConfig.redis.server.port}
    timeout: ${customConfig.redis.server.timeout}
    jedis:
      pool:
        max-active: ${customConfig.redis.server.jedis.pool.max-active} # 连接池最大连接数（使用负值表示没有限制）
        max-wait: ${customConfig.redis.server.jedis.pool.max-wait}  # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: ${customConfig.redis.server.jedis.pool.max-idle}  # 连接池中的最大空闲连接
        min-idle: ${customConfig.redis.server.jedis.pool.min-idle}  # 连接池中的最小空闲连接
  datasource:
    url: ${customConfig.datasource.server.url}
    username: ${customConfig.datasource.server.username}
    password: ${customConfig.datasource.server.password}
    driver-class-name: ${customConfig.datasource.server.driver-class-name}
    driverClassName: ${customConfig.datasource.server.driver-class-name}
    # 初始化大小，最小，最大
    initialSize: 1
    minIdle: 3
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 30000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    #useGlobalDataSourceStat: true
#    druid:
#      initial-size: 1
#      max-active: 20
#      min-idle: 3
#      max-wait: 60000
#      pool-prepared-statements: false
#      validation-query: SELECT 'x'
#      test-on-borrow: false
#      test-on-return: false
#      test-while-idle: true
#      time-between-eviction-runs-millis: 60000
#      min-evictable-idle-time-millis: 30000
#      max-pool-prepared-statement-per-connection-size: 20
  jpa:
    database: MYSQL
    show-sql: true
  zipkin:
    enabled: true
    base-url: http://localhost:9410
    locator:
      discovery:
        enabled: true
    rabbitmq:
      queue: zipkin
  sleuth:
    sampler:
      probability: 1.0 #采样率为1.0 全部
  rabbitmq:
      host: ${customConfig.rabbitmq.server.host}
      port: ${customConfig.rabbitmq.server.port}
      username: ${customConfig.rabbitmq.server.username}
      password: ${customConfig.rabbitmq.server.password}
  session:
    store-type: none #本应用暂无需将session放入redis的需求，故这里就可以将session store type设置为none

  thymeleaf:
    mode: HTML5
    encoding: utf-8
    #生产环境开启-true
    cache: false
  messages:
    #国际化资源文件路径
    basename: i18n/messages
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  profiles:
    active: druid
  #文件上传
  servlet:
     multipart:
       max-file-size:  30MB
       max-request-size:  30MB

  devtools:
    restart:
      #禁用devtools模块的热部署功能
      enabled: true

zuul:
  retryable: true #重试机制开关
#对当前服务的重试次数
ribbon:
# 所有请求都重试,请求超时或者socket read timeout都进行重试,默认只会在socket还没建立连接时进行重试，比如突然网络抖动或者一台服务实例挂了
# (修改操作，如果服务器长时间不返回，客户端发生socket read timeout会进行重试，如果服务器接口没做幂等性，这个后果自己想想。)
#  OkToRetryOnAllOperations: true  所以这个属性不设置
  MaxAutoRetriesNextServer: 5
  MaxAutoRetries: 0 #同一台实例最大重试次数，不包括首次
  ConnectTimeout: 500 #指建立连接的时间
  ReadTimeout: 10000
  SocketTimeout: 10000
hystrix:
    command:
        default:
            execution:
                isolation:
                    thread:
                        timeoutInMilliseconds: 10000
management:
  endpoints:
    web:
      exposure:
        include: "*"
  security:
    enabled: false
  endpoint:
    health:
      show-details: ALWAYS
#  security:
#    user:
#      name: ${customConfig.security.username}
#      password: ${customConfig.security.password}

auth-server: http://localhost:8002 # 认证服务器地址
#auth-server: http://localhost:8001/spring-oauth # 认证服务器地址
security:
  ignored: /favicon.ico,/scripts/**,/styles/**,/images/**
  sessions: ALWAYS
  oauth2:
      sso:
        loginPath: /login
      client:
        clientId: ssoclient
        clientSecret: ssosecret
        accessTokenUri: ${auth-server}/oauth/token
        userAuthorizationUri: ${auth-server}/oauth/authorize
        clientAuthenticationScheme: form
        use-current-uri: true #如果在服务器端配置了自定义的回调地址,这里就必须设置成false,回调如:http://localhost:8005/getHello?code=XXFzbd&state=rOBMf7,我这里为true
      resource:
        jwt:
          keyUri: ${auth-server}/oauth/token_key

securityconfig:
  logoutsuccssurl: /tosignout
  permitall: /getHello,/bb**
  deniedpage: /deny
  urlroles:
            /getHello3 = editor;
            /**/delete/** = admin


# MyBatis
mybatis:
    # 搜索指定包别名
    typeAliasesPackage: project
    # 配置mapper的扫描，找到所有的mapper.xml映射文件
    mapperLocations: classpath:mybatis/**/*Mapper.xml
    # 加载全局的配置文件
    configLocation: classpath:mybatis/mybatis-config.xml
# PageHelper
pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql
# Shiro
shiro:
  user:
    # 登录地址
    loginUrl: /login
    # 权限认证失败地址
    unauthorizedUrl: /unauth
    # 首页地址
    indexUrl: /index
    # 验证码开关
    captchaEbabled: true
    # 验证码类型 math 数组计算 char 字符
    captchaType: math
  cookie:
    # 设置Cookie的域名 默认空，即当前访问的域名
    domain:
    # 设置cookie的有效访问路径
    path: /
    # 设置HttpOnly属性
    httpOnly: true
    # 设置Cookie的过期时间，天为单位
    maxAge: 30
  session:
    # Session超时时间（默认30分钟）
    expireTime: 30
    # 同步session到数据库的周期（默认1分钟）
    dbSyncPeriod: 1
    # 相隔多久检查一次session的有效性，默认就是10分钟
    validationInterval: 10
# 代码生成
gen:
  # 作者
  author: water
  # 默认生成包路径 module 需改成自己的模块名称 如 system monitor tool
  packageName: project.module
  # 自动去除表前缀，默认是true
  autoRemovePre: true
  # 表前缀(类名不会包含表前缀)
  tablePrefix: sys_



#日志配置
logging:
  level:
    com.liu: debug
    org.springframework: WARN
    org.spring.springboot.dao: debug
#用户配置
user:
  password:
    #密码错误{maxRetryCount}次锁定10分钟
    maxRetryCount: 5


# 项目名称、版本、版权年份
Water:
  name: Water
  version: 1.0.0
  copyrightYear: 2018
  profile: D:/profile/






#debug: true
#logging:
#  level:
#   org: DEBUG
#   com: DEBUG

customConfig:
  eureka:
    server: #eureka的配置
      port: 8000
      username: admin
      password: admin123
      hostname: localhost
  config:
    server: #config的配置
      appname: spring-config
      username: admin
      password: admin123
      hostname: localhost
#  security: #security的配置
#    username: admin
#    password: admin123
  admin:  #admin的配置
    server:
      port: 7000
      hostname: localhost
      username: admin
      password: admin123
  redis:
    server:
      host: 127.0.0.1
      password: admin123
      port: 6379
      timeout: 8000
      jedis:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
  datasource:
    server:
      url: jdbc:mysql://127.0.0.1:3306/lovesound?useSSL=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT
      username: root
      password: adminsina
      driver-class-name: com.mysql.jdbc.Driver
  rabbitmq: #rabbitmq的配置
    server:
      host: 127.0.0.1
      port: 5672
      username: guest
      password: guest





